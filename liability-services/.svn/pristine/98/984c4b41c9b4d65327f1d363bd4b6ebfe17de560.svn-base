package lu.wealins.liability.services.core.persistence.entity;
// Generated Dec 1, 2016 12:16:30 PM by Hibernate Tools 4.3.1

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.ConstructorResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.SqlResultSetMappings;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * FundTransactionEntity generated by hbm2java
 */
@SqlResultSetMappings({
		@SqlResultSetMapping(name = "EstimatedOrderExtraction", classes = @ConstructorResult(targetClass = EstimatedOrderNoEntity.class, columns = {
				@ColumnResult(name = "FTR_ID"),
				@ColumnResult(name = "EVENT_TYPE"),
				@ColumnResult(name = "ISIN_CODE"),
				@ColumnResult(name = "CURRENCY"),
				@ColumnResult(name = "DEPOSIT_ACCOUNT"),
				@ColumnResult(name = "ACTIVITY_DATE"),
				@ColumnResult(name = "DATE0"),
				@ColumnResult(name = "UNITS"),
				@ColumnResult(name = "VALUE_FUND_CCY"),
				@ColumnResult(name = "PRICE"),
				@ColumnResult(name = "FK_POLICIESPOL_ID"),
				@ColumnResult(name = "STATUS"),
				@ColumnResult(name = "ESTIMATED_TRANS_SENT")
		})),
		@SqlResultSetMapping(name = "EstimatedOrderExtraction.Count", columns = {
				@ColumnResult(name = "COUNT")
		}),
		@SqlResultSetMapping(name = "FundTransactionsOrderSum", columns = { @ColumnResult(name = "SUM") }),
		@SqlResultSetMapping(name = "ValorizedOrderExtraction", classes = @ConstructorResult(targetClass = ValorizedOrderNoEntity.class, columns = {
				@ColumnResult(name = "FTR_ID"),
				@ColumnResult(name = "EVENT_TYPE"),
				@ColumnResult(name = "ISIN_CODE"),
				@ColumnResult(name = "CURRENCY"),
				@ColumnResult(name = "DEPOSIT_ACCOUNT"),
				@ColumnResult(name = "ACTIVITY_DATE"),
				@ColumnResult(name = "DATE0"),
				@ColumnResult(name = "UNITS"),
				@ColumnResult(name = "VALUE_FUND_CCY"),
				@ColumnResult(name = "PRICE"),
				@ColumnResult(name = "FK_POLICIESPOL_ID"),
				@ColumnResult(name = "STATUS"),
				@ColumnResult(name = "VALUED_TRANS_SENT"),
				@ColumnResult(name = "ESTIMATED_TRANS_SENT")
		})),
		@SqlResultSetMapping(name = "ValorizedOrderExtraction.Count", columns = {
				@ColumnResult(name = "COUNT")
		}),
		@SqlResultSetMapping(name = "TransactionGroupedByFund", classes = @ConstructorResult(targetClass = TransactionGroupedByFundNoEntity.class, columns = {
				@ColumnResult(name = "POL_ID"),
				@ColumnResult(name = "FUND"),
				@ColumnResult(name = "UNITS")
		})),
		@SqlResultSetMapping(name = "updateResultCount", columns = {
				@ColumnResult(name = "COUNT")
		})

})
@NamedNativeQueries({
		@NamedNativeQuery(name = "FundTransactionEntity.findTransactionsInWithInputFees", query = "select ft.* from fund_transactions ft inner join x_funds_j x on x.xfj_id = ft.fund "
				+ "and isnull(x.entry_fees, 0) = 1 where ft.status in (3, 4, 6, 8, 10) and ft.event_type in (8, 38) and ft.fund = ?1 and ft.date0 = ?2", resultClass = FundTransactionEntity.class),
		@NamedNativeQuery(name = "FundTransactionEntity.findTransactionsOutWithOutputFees", query = "select ft.* from fund_transactions ft inner join x_funds_j x on x.xfj_id = ft.fund and isnull(x.exit_fees, 0) = 1 where ft.status in (3, 4, 6, 8, 10) and ft.event_type in (4, 15, 17, 21, 37, 82) and ft.fund = ?1 and ft.date0 = ?2", resultClass = FundTransactionEntity.class),
		@NamedNativeQuery(name = "FundTransactionEntity.findBlockedTransactions", query = "select ft.* from fund_transactions ft inner join x_funds_j x on x.xfj_id = ft.fund and isnull(x.locked_fund, 0) = 1  where ft.status in (3, 4, 6, 8, 10) and ft.event_type in (4, 8, 15, 17, 21, 37, 38, 82) and ft.fund = ?1 and ft.date0 = ?2", resultClass = FundTransactionEntity.class),

		// Estimated Order (one query to select, one query for the count. The count is necessary for the pagination)
		@NamedNativeQuery(name = "FundTransactionEntity.findEstimatedOrder", query = "select ft.FTR_ID as FTR_ID, ft.EVENT_TYPE as EVENT_TYPE, f.ISIN_CODE as ISIN_CODE, f.CURRENCY as CURRENCY,"
				+ " f.DEPOSIT_ACCOUNT as DEPOSIT_ACCOUNT, ft.ACTIVITY_DATE as ACTIVITY_DATE, ft.DATE0 as DATE0, ft.UNITS as UNITS, ft.VALUE_FUND_CCY as VALUE_FUND_CCY, ft.PRICE as PRICE,"
				+ " ft.FK_POLICIESPOL_ID as FK_POLICIESPOL_ID, ft.STATUS as STATUS, ft.ESTIMATED_TRANS_SENT as ESTIMATED_TRANS_SENT"
				+ " from fund_transactions ft inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS in (3,6) and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21)"
				+ " and (ft.ESTIMATED_TRANS_SENT = 0 or ft.ESTIMATED_TRANS_SENT IS NULL) and (ft.VALUED_TRANS_SENT IS NULL or ft.VALUED_TRANS_SENT = 0) "
				+ "and (ft.VALUE_FUND_CCY != 0 or ft.UNITS != 0) and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId order by ft.FTR_ID", resultSetMapping = "EstimatedOrderExtraction"),
		@NamedNativeQuery(name = "FundTransactionEntity.findEstimatedOrder.count", query = "select count(*) as COUNT from fund_transactions ft "
				+ "inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS in (3,6) and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) "
				+ " and (ft.ESTIMATED_TRANS_SENT = 0 or ft.ESTIMATED_TRANS_SENT IS NULL) and (ft.VALUED_TRANS_SENT IS NULL or ft.VALUED_TRANS_SENT = 0) "
				+ "and (ft.VALUE_FUND_CCY != 0 or ft.UNITS != 0) and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId", resultSetMapping = "EstimatedOrderExtraction.Count"),

		// Cancelled Estimated Order (one query to select, one query for the count. The count is necessary for the pagination)
		@NamedNativeQuery(name = "FundTransactionEntity.findCancelledEstimatedOrder", query = "select ft.FTR_ID as FTR_ID, ft.EVENT_TYPE as EVENT_TYPE, f.ISIN_CODE as ISIN_CODE, f.CURRENCY as CURRENCY,"
				+ " f.DEPOSIT_ACCOUNT as DEPOSIT_ACCOUNT, ft.ACTIVITY_DATE as ACTIVITY_DATE, ft.DATE0 as DATE0, ft.UNITS as UNITS, ft.VALUE_FUND_CCY as VALUE_FUND_CCY, ft.PRICE as PRICE,"
				+ " ft.FK_POLICIESPOL_ID as FK_POLICIESPOL_ID, ft.STATUS as STATUS, ft.ESTIMATED_TRANS_SENT as ESTIMATED_TRANS_SENT"
				+ " from fund_transactions ft inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS in (2,5,7) and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21)"
				+ " and ft.ESTIMATED_TRANS_SENT = 1 and (ft.VALUED_TRANS_SENT IS NULL or ft.VALUED_TRANS_SENT = 0) "
				+ "and (ft.VALUE_FUND_CCY != 0 or ft.UNITS != 0) and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId order by ft.FTR_ID", resultSetMapping = "EstimatedOrderExtraction"),
		@NamedNativeQuery(name = "FundTransactionEntity.findCancelledEstimatedOrder.count", query = "select count(*) as COUNT from fund_transactions ft "
				+ "inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS in (2,5,7) and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) "
				+ " and ft.ESTIMATED_TRANS_SENT = 1 and (ft.VALUED_TRANS_SENT IS NULL or ft.VALUED_TRANS_SENT = 0) "
				+ "and (ft.VALUE_FUND_CCY != 0 or ft.UNITS != 0) and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId", resultSetMapping = "EstimatedOrderExtraction.Count"),

		// Valorized Order (one query to select, one query for the count. The count is necessary for the pagination)
		@NamedNativeQuery(name = "FundTransactionEntity.findValorizedOrder", query = "select ft.FTR_ID as FTR_ID, ft.EVENT_TYPE as EVENT_TYPE, f.ISIN_CODE as ISIN_CODE, f.CURRENCY as CURRENCY,"
				+ " f.DEPOSIT_ACCOUNT as DEPOSIT_ACCOUNT, ft.ACTIVITY_DATE as ACTIVITY_DATE, ft.DATE0 as DATE0, ft.UNITS as UNITS, ft.VALUE_FUND_CCY as VALUE_FUND_CCY, ft.PRICE as PRICE,"
				+ " ft.FK_POLICIESPOL_ID as FK_POLICIESPOL_ID, ft.STATUS as STATUS, ft.VALUED_TRANS_SENT as VALUED_TRANS_SENT, ft.ESTIMATED_TRANS_SENT as ESTIMATED_TRANS_SENT"
				+ " from fund_transactions ft inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS = 1 and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) and"
				+ " (ft.ESTIMATED_TRANS_SENT != 2 or ft.ESTIMATED_TRANS_SENT IS NULL or ft.ESTIMATED_TRANS_SENT = 0) and (ft.VALUED_TRANS_SENT = 0 or ft.VALUED_TRANS_SENT IS NULL) "
				+ "and ft.UNITS != 0 and ft.VALUE_FUND_CCY != 0 and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId order by ft.FTR_ID", resultSetMapping = "ValorizedOrderExtraction"),
		@NamedNativeQuery(name = "FundTransactionEntity.findValorizedOrder.count", query = "select count(*) as COUNT from fund_transactions ft "
				+ "inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS = 1 and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) "
				+ "and (ft.ESTIMATED_TRANS_SENT != 2 or ft.ESTIMATED_TRANS_SENT IS NULL or ft.ESTIMATED_TRANS_SENT = 0) and (ft.VALUED_TRANS_SENT = 0 or ft.VALUED_TRANS_SENT IS NULL) "
				+ "and ft.UNITS != 0 and ft.VALUE_FUND_CCY != 0 and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId", resultSetMapping = "ValorizedOrderExtraction.Count"),

		// Cancelled Valorized Order (one query to select, one query for the count. The count is necessary for the pagination)
		@NamedNativeQuery(name = "FundTransactionEntity.findCancelledValorizedOrder", query = "select ft.FTR_ID as FTR_ID, ft.EVENT_TYPE as EVENT_TYPE, f.ISIN_CODE as ISIN_CODE, f.CURRENCY as CURRENCY,"
				+ " f.DEPOSIT_ACCOUNT as DEPOSIT_ACCOUNT, ft.ACTIVITY_DATE as ACTIVITY_DATE, ft.DATE0 as DATE0, ft.UNITS as UNITS, ft.VALUE_FUND_CCY as VALUE_FUND_CCY, ft.PRICE as PRICE,"
				+ " ft.FK_POLICIESPOL_ID as FK_POLICIESPOL_ID, ft.STATUS as STATUS, ft.VALUED_TRANS_SENT as VALUED_TRANS_SENT, ft.ESTIMATED_TRANS_SENT as ESTIMATED_TRANS_SENT"
				+ " from fund_transactions ft inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS = 5 and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) and"
				+ " (ft.ESTIMATED_TRANS_SENT = 1 or ft.ESTIMATED_TRANS_SENT = 0 or ft.ESTIMATED_TRANS_SENT IS NULL) and ft.VALUED_TRANS_SENT = 1 "
				+ "and ft.UNITS != 0 and ft.VALUE_FUND_CCY != 0 and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId order by ft.FTR_ID", resultSetMapping = "ValorizedOrderExtraction"),
		@NamedNativeQuery(name = "FundTransactionEntity.findCancelledValorizedOrder.count", query = "select count(*) as COUNT from fund_transactions ft "
				+ "inner join funds f on(ft.FUND = f.FDS_ID) where ft.STATUS = 5 and f.FUND_SUB_TYPE in ('FE','FIC') "
				+ " and ft.EVENT_TYPE in (38,37,17,44,12,13,3,15,4,8,71,21) "
				+ "and (ft.ESTIMATED_TRANS_SENT = 1 or ft.ESTIMATED_TRANS_SENT = 0 or ft.ESTIMATED_TRANS_SENT IS NULL) and ft.VALUED_TRANS_SENT = 1 "
				+ "and ft.UNITS != 0 and ft.VALUE_FUND_CCY != 0 and ft.FK_FUND_TRANSACFTD_ID IS NOT NULL and ft.FTR_ID > :lastId", resultSetMapping = "ValorizedOrderExtraction.Count"),
		@NamedNativeQuery(name = "FundTransactionEntity.findUnitsSumOfTransactionsGroupedByPolicyAndFund", query = "select ft.FK_POLICIESPOL_ID POL_ID, ft.fund FUND, sum(units) UNITS" +
				" from FUND_TRANSACTIONS ft" +
				" join TRANSACTIONS t on (ft.FK_POLICIESPOL_ID = t.FK_POLICIESPOL_ID)" +
				" join POLICIES p on (p.POL_ID = ft.FK_POLICIESPOL_ID and t.TRN_ID = ft.FK_TRANSACTIONSTRN_ID)" +
				" where ft.STATUS = 1 and ft.DATE0 <= ?2" +
				" and p.POL_ID IN ?1" +
				" group by ft.FK_POLICIESPOL_ID, ft.fund having sum(units) > 0", resultSetMapping = "TransactionGroupedByFund"),

		@NamedNativeQuery(name = "FundTransactionEntity.pr_PRE_FPC01", query = "UPDATE ft"
				+ " SET	PRICE = 0,"
				+ " 	UNITS = 0,"
				+ " 	EXCHANGE_RATE = 0,"
				+ " 	HOLDING_VALUATION = 0,"
				+ " 	STATUS = 4,"
				+ " 	MODIFY_TIME = '',"
				+ " 	MODIFY_SYSTEM_DATE = '',"
				+ " 	MODIFY_DATE = '',"
				+ " 	DATE_FWD_PRICE_REP = null,"
				+ " 	MODIFY_PROCESS = '',"
				+ " 	MODIFY_BY = '',"
				+ " 	ACT_FUND_UNITS = 0,"
				+ " 	ACT_FUND_VALUE_FUND_CCY = 0,"
				+ " 	ACT_FUND_VALUE_POLICY_CCY = 0,"
				+ " 	MARGIN_VALUE = 0,"
				+ " 	ACT_FUND_FACTOR = 0"
				+ " from	FUND_TRANSACTIONS ft"
				+ " 	inner join funds f"
				+ " 	  on f.FDS_ID = ft.FUND"
				+ " where	ft.status in (3)"
				+ " 	and f.FUND_TYPE <> 3" // seuls les multi-supports sont concernés
				+ " 	and not exists (select * from fund_transactions where FK_TRANSACTIONSTRN_ID = ft.FK_TRANSACTIONSTRN_ID and status in (8, 10))" // rot 03.02.2014 - pour ne pas sélectionner les
																																						// polices mixtes (FD et UL) ou SI
				+ " 	and"
				+ " 		(not exists"
				+ " 		("
				+ " 		select	*"
				+ " 		from	POLICY_FUND_HOLDINGS pfhx"
				+ " 			inner join funds fx"
				+ " 			  on fx.FDS_ID = pfhx.FUND and fx.STATUS = 1"
				+ " 		where	1 = 1"
				+ " 			and pfhx.STATUS = 1"
				+ " 			and pfhx.FK_POLICIESPOL_ID = ft.FK_POLICIESPOL_ID"
				+ " 			and pfhx.HOLDING_NO = ft.coverage"
				+ " 			and fx.FUND_TYPE = 3"
				+ " 		) or ft.event_type in (37,38)"
				+ " 		)"
		// + " and not (ft.FK_TRANSACTIONSTRN_ID in (4633976, 4636755, 4636756, 4637594, 4637595, 4640413,"
		// + " 4641123, 4641133, 4641134, 4641135, 4641156, 4641149, 4641133, 4641791, 4641159, 4641791,"
		// + " 4645355, 4641794, 4646369, 4647118, 4668721, 4668722, 4668720, 4668726, 4668729, 4668730,"
		// + " 4668731, 4668744, 4668745, 4668746, 4671434, 4671462, 4677793, 4677898, 4677899, 4677900,"
		// + " 4677454, 4677455, 4677456, 4677457, 4679225, 4680395, 4684866, 4684772, 4685045, 4685046,"
		// + " 4685047, 4685261, 4685262, 4685263, 4689422, 4690885, 4690870, 4692024, 4714165, 4714147,"
		// + " 4714148, 4714149, 4715647, 4715648, 4715649, 4716832, 4718185, 4718729, 4719409, 4718336,"
		// + " 4722189, 4723307, 4724315, 4724316, 4724317, 4724300, 4728073, 4731289, 4733204, 4733724,"
		// + " 4733725, 4733726, 4733874, 4734029, 4734695, 4736158, 4736167, 4769695, 4773975, 4779608,"
		// + " 4792066, 4792352, 4826908, 4829543, 4840146, 4872099, 4871339, 4882286, 4878689, 4887181,"
		// + " 4887106, 4916767, 4920321, 4920322, 4926959, 4927670, 4979743, 4979744, 4979745, 4979746,"
		// + " 4979747, 4979748, 4979749, 4979750, 4979751, 4981993, 4982792, 4993359, 4994320, 5015498,"
		// + " 5016384, 5015498, 5016384, 5033554, 5035679, 5035678, 5068589, 5079494, 5079495, 5085365,"
		// + " 5089090, 5089089, 5100235, 5127206, 5127207, 5127208, 5127209, 5127210, 5130775, 5136513,"
		// + " 5136514))"
				, resultSetMapping = "updateResultCount"),

		// Insertion des FTD qui n'existent pas encore suite à la modification du champ FK_FUND_TRANSACFTD_ID
		@NamedNativeQuery(name = "FundTransactionEntity.pr_PRE_FPC02", query = " INSERT	INTO FUND_TRANSACTION_DATES"
				+ " 		select	distinct"
				+ " 			ft.FK_FUND_TRANSACFTD_ID,"
				+ " 			convert(datetime, right(rtrim(ft.fk_fund_transacftd_id), 8), 112),"
				+ " 			0," // UNIT_TYPE
				+ " 			1," // TRANSACTION_WAITING
				+ " 			ft.fund," // FUND
				+ " 			("
				+ " 			select	count(*)"
				+ " 			from	FUND_TRANSACTIONS"
				+ " 			where	FK_FUND_TRANSACFTD_ID = ft.FK_FUND_TRANSACFTD_ID"
				+ " 				and STATUS in (3, 4, 6, 8, 10)"
				+ " 				and FK_FUND_TRANSACFTD_ID is not null"
				+ " 			),"
				+ " 			'auto'," // CREATED_BY
				+ " 			DATEADD(day, DATEDIFF(day, 0, getdate()), 0)," // CREATED_DATE
				+ " 			DATEADD(ms, DATEDIFF(ms, DATEADD(day, DATEDIFF(day, 0, GETDATE()), 0), GETDATE()), 0)," // CREATED_TIME
				+ " 			DATEADD(day, DATEDIFF(day, 0, getdate()), 0)," // CREATED_SYSTEM_DATE
				+ " 			'PRE_FPC'" // CREATED_PROCESS
				+ " 			,'', '', '', '', ''," // MODIFY_BY, _DATE, _TIME, ...
				+ " 			ft.fund"
				+ " 		from	FUND_TRANSACTIONS ft"
				+ " 			left join FUND_TRANSACTION_DATES ftd"
				+ " 			  on ftd.FTD_ID = ft.FK_FUND_TRANSACFTD_ID"
				+ " 		where	ft.STATUS = 4"
				+ " 			and isnull(ftd.ftd_id, '') = ''"
				+ " 			and ft.FK_FUND_TRANSACFTD_ID is not null", resultSetMapping = "updateResultCount"),

		// Modification du status des FTD qui existent déjà suite à la modification du champ FK_FUND_TRANSACFTD_ID,
		// mais qui ont un statut à 2
		@NamedNativeQuery(name = "FundTransactionEntity.pr_PRE_FPC03", query = " update	ftd "
				+ " set	status = 1, TRANSACTIONS_WAITING = 1"
				+ " from	FUND_TRANSACTIONS ft"
				+ " 	inner join FUND_TRANSACTION_DATES ftd"
				+ " 		on ftd.FTD_ID = ft.FK_FUND_TRANSACFTD_ID"
				+ " where	ft.STATUS = 4"
				+ " 	and ft.FK_FUND_TRANSACFTD_ID is not null"
				+ " 	and ftd.status = 2", resultSetMapping = "updateResultCount"),

		@NamedNativeQuery(name = "FundTransactionEntity.pr_POST_FPC01", query = "UPDATE ft "
				+ "	SET	"
				+ "	PRICE = 0,"
				+ "	UNITS = 0,"
				+ "	EXCHANGE_RATE = 0,"
				+ "	POLICY_CURRENCY = '',"
				+ "	HOLDING_VALUATION = 0,"
				+ "	STATUS = (case ft.status when 3 then 4 else ft.status end),"
				+ "	MODIFY_TIME = '',"
				+ "	MODIFY_SYSTEM_DATE = '',"
				+ "	MODIFY_DATE = '',"
				+ "	DATE_FWD_PRICE_REP = null,"
				+ "	MODIFY_PROCESS = '',"
				+ "	MODIFY_BY = '',"
				+ "	ACT_FUND_UNITS = 0,"
				+ "	ACT_FUND_VALUE_FUND_CCY = 0,"
				+ "	ACT_FUND_VALUE_POLICY_CCY = 0,"
				+ "	MARGIN_VALUE = 0,"
				+ "	ACT_FUND_FACTOR = 0"
				+ "	from	FUND_TRANSACTIONS ft"
				+ "	inner join funds f"
				+ "	on f.FDS_ID = ft.FUND"
				+ "	inner join Reporting.dbo.Calendar c0"
				+ "	on c0.dt = ft.DATE_FWD_PRICE_REP"
				+ "	inner join Reporting.dbo.Calendar c1"
				+ "	on c1.id_fisa_bsn_day = c0.id_fisa_bsn_day + f.FWD_PRICE_REPORT_DAYS"
				+ "	where"
				+ "	ft.STATUS in (3, 6)"
				+ "	and f.FUND_TYPE <> 3" // seules les multi-supports sont concernés
				+ "	and ft.DATE0 > c1.dt"
				+ "	and not exists (select * from fund_transactions where FK_TRANSACTIONSTRN_ID = ft.FK_TRANSACTIONSTRN_ID and status in (8, 10))"
		// + " and not (ft.FK_TRANSACTIONSTRN_ID in (4633976, 4636755, 4636756, 4637594, 4637595, 4640413,"
		// + " 4641123, 4641133, 4641134, 4641135, 4641156, 4641149, 4641133, 4641791, 4641159, 4641791,"
		// + " 4645355, 4641794, 4646369, 4647118, 4668721, 4668722, 4668720, 4668726, 4668729, 4668730,"
		// + " 4668731, 4668744, 4668745, 4668746, 4671434, 4671462, 4677793, 4677898, 4677899, 4677900,"
		// + " 4677454, 4677455, 4677456, 4677457, 4679225, 4680395, 4684866, 4684772, 4685045, 4685046,"
		// + " 4685047, 4685261, 4685262, 4685263, 4689422, 4690885, 4690870, 4692024, 4714165, 4714147,"
		// + " 4714148, 4714149, 4715647, 4715648, 4715649, 4716832, 4718185, 4718729, 4719409, 4718336,"
		// + " 4722189, 4723307, 4724315, 4724316, 4724317, 4724300, 4728073, 4731289, 4733204, 4733724,"
		// + " 4733725, 4733726, 4733874, 4734029, 4734695, 4736158, 4736167, 4769695, 4773975, 4779608,"
		// + " 4792066, 4792352, 4826908, 4829543, 4840146, 4872099, 4871339, 4882286, 4878689, 4887181,"
		// + " 4887106, 4916767, 4920321, 4920322, 4926959, 4927670, 4979743, 4979744, 4979745, 4979746,"
		// + " 4979747, 4979748, 4979749, 4979750, 4979751, 4981993, 4982792, 4993359, 4994320, 5015498,"
		// + " 5016384, 5015498, 5016384, 5033554, 5035679, 5035678, 5068589, 5079494, 5079495, 5085365,"
		// + " 5089090, 5089089, 5100235, 5127206, 5127207, 5127208, 5127209, 5127210, 5130775, 5136513,"
		// + " 5136514))"
				, resultSetMapping = "updateResultCount"),
		// Remise à niveau des champs FK_FUND_TRANSACFTD_ID des FT
		@NamedNativeQuery(name = "FundTransactionEntity.pr_POST_FPC02", query = "UPDATE ft "
				+ " set FK_FUND_TRANSACFTD_ID = rtrim(ft.fund) + '_' + convert(char(8), ft.DATE0, 112) "
				+ " from	FUND_TRANSACTIONS ft "
				+ " where	ft.STATUS in (3, 4) ", resultSetMapping = "updateResultCount"),

		// Mise à jour des transactions en attente pour tous les enregs FTD
		@NamedNativeQuery(name = "FundTransactionEntity.pr_POST_FPC03", query = "update	ftd "
				+ " set	TRANSACTIONS_WAITING =  "
				+ " ( "
				+ " select	count(*) "
				+ " from	FUND_TRANSACTIONS "
				+ " where	FK_FUND_TRANSACFTD_ID = ftd.FTD_ID "
				+ " 	and STATUS in (3, 4, 6, 8, 10) "
				+ " 	and FK_FUND_TRANSACFTD_ID is not null "
				+ " ), "
				+ " status = 1 "
				+ " from	FUND_TRANSACTION_DATES ftd ", resultSetMapping = "updateResultCount"),

		// Mise à jour des statuts si TRANSACTUIONS_WAITING = 0
		@NamedNativeQuery(name = "FundTransactionEntity.pr_POST_FPC04", query = "update FUND_TRANSACTION_DATES set status = 2 where TRANSACTIONS_WAITING = 0 ", resultSetMapping = "updateResultCount"),

		@NamedNativeQuery(name = "FundTransactionEntity.findFundTransactionOrder", query = " select sum(abs(VALUE_POL_CCY)) "
				+ " from FUND_TRANSACTIONS where FK_TRANSACTIONSTRN_ID = ? and UNIT_TYPE = '1' and STATUS = '1' "
				+ " group by FK_TRANSACTIONSTRN_ID  ", resultSetMapping = "FundTransactionsOrderSum")

})

@Entity
@Table(name = "FUND_TRANSACTIONS")
@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler", "createdProcess", "modifyProcess", "createdBy", "createdDate", "createdTime", "modifyDate", "modifyTime", "modifyBy" })
public class FundTransactionEntity implements java.io.Serializable {

	private long ftrId;
	@JsonIgnore
	private FundTransactionDateEntity fundTransactionDate;
	@JsonIgnore
	private PolicyEntity policy;
	@JsonIgnore
	private PolicyFundInstructionEntity policyFundInstruction;
	@JsonIgnore
	private TransactionEntity transaction;
	private Integer priority;
	private String productLine;
	private String accset;
	private Integer holding;
	private String policyId;
	private Integer coverage;
	private BigDecimal price;
	private BigDecimal units;
	private Integer action0;
	private Integer unitType;
	private Date date0;
	private Date activityDate;
	private Date pricingDate;
	private BigDecimal exchangeRate;
	private String fundCurrency;
	private String policyCurrency;
	private BigDecimal valuePolCcy;
	private BigDecimal valueFundCcy;
	private String fund;
	private int eventType;
	private Date dateFwdPriceRep;
	private Long transaction0;
	private int lineNo;
	private BigDecimal holdingValuation;
	private Integer status;
	private String createdBy;
	private Date createdDate;
	private Date createdTime;
	private String createdProcess;
	private Date createdSystemDate;
	private String modifyBy;
	private Date modifyDate;
	private Date modifyTime;
	private String modifyProcess;
	private Date modifySystemDate;
	private Integer jobNumber;
	private Long fkFundTransacftrId;
	private Integer reciprocal;
	private Integer basis;
	private BigDecimal actFundUnits;
	private BigDecimal actFundValueFundCcy;
	private BigDecimal actFundValuePolicyCcy;
	private BigDecimal actFundFactor;
	private BigDecimal marginValue;
	private BigDecimal marginValuePrem;
	private Integer valorizedFlag;
	private Integer estimatedFlag;

	@JsonIgnore
	private Set<AccountTransactionEntity> accountTransactions = new HashSet<AccountTransactionEntity>(0);

	@Id
	@Column(name = "FTR_ID", unique = true, nullable = false, precision = 15, scale = 0)
	public long getFtrId() {
		return this.ftrId;
	}

	public void setFtrId(long ftrId) {
		this.ftrId = ftrId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FK_FUND_TRANSACFTD_ID")
	@NotFound(action = NotFoundAction.IGNORE)
	public FundTransactionDateEntity getFundTransactionDate() {
		return this.fundTransactionDate;
	}

	public void setFundTransactionDate(FundTransactionDateEntity fundTransactionDate) {
		this.fundTransactionDate = fundTransactionDate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FK_POLICIESPOL_ID")
	public PolicyEntity getPolicy() {
		return this.policy;
	}

	public void setPolicy(PolicyEntity policy) {
		this.policy = policy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FK_POLICY_FUND_PFI_ID")
	public PolicyFundInstructionEntity getPolicyFundInstruction() {
		return this.policyFundInstruction;
	}

	public void setPolicyFundInstruction(PolicyFundInstructionEntity policyFundInstruction) {
		this.policyFundInstruction = policyFundInstruction;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "FK_TRANSACTIONSTRN_ID")
	public TransactionEntity getTransaction() {
		return this.transaction;
	}

	public void setTransaction(TransactionEntity transaction) {
		this.transaction = transaction;
	}

	@Column(name = "PRIORITY")
	public Integer getPriority() {
		return this.priority;
	}

	public void setPriority(Integer priority) {
		this.priority = priority;
	}

	@Column(name = "PRODUCT_LINE", length = 8)
	public String getProductLine() {
		return this.productLine;
	}

	public void setProductLine(String productLine) {
		this.productLine = productLine;
	}

	@Column(name = "ACCSET", length = 4)
	public String getAccset() {
		return this.accset;
	}

	public void setAccset(String accset) {
		this.accset = accset;
	}

	@Column(name = "HOLDING")
	public Integer getHolding() {
		return this.holding;
	}

	public void setHolding(Integer holding) {
		this.holding = holding;
	}

	@Column(name = "POLICY", length = 14)
	public String getPolicyId() {
		return this.policyId;
	}

	public void setPolicyId(String policyId) {
		this.policyId = policyId;
	}

	@Column(name = "COVERAGE")
	public Integer getCoverage() {
		return this.coverage;
	}

	public void setCoverage(Integer coverage) {
		this.coverage = coverage;
	}

	@Column(name = "PRICE", precision = 15, scale = 6)
	public BigDecimal getPrice() {
		return this.price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	@Column(name = "UNITS", precision = 15, scale = 6)
	public BigDecimal getUnits() {
		return this.units;
	}

	public void setUnits(BigDecimal units) {
		this.units = units;
	}

	@Column(name = "ACTION0")
	public Integer getAction0() {
		return this.action0;
	}

	public void setAction0(Integer action0) {
		this.action0 = action0;
	}

	@Column(name = "UNIT_TYPE")
	public Integer getUnitType() {
		return this.unitType;
	}

	public void setUnitType(Integer unitType) {
		this.unitType = unitType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE0", nullable = false, length = 23)
	public Date getDate0() {
		return this.date0;
	}

	public void setDate0(Date date0) {
		this.date0 = date0;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ACTIVITY_DATE", length = 23)
	public Date getActivityDate() {
		return this.activityDate;
	}

	public void setActivityDate(Date activityDate) {
		this.activityDate = activityDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PRICING_DATE", length = 23)
	public Date getPricingDate() {
		return this.pricingDate;
	}

	public void setPricingDate(Date pricingDate) {
		this.pricingDate = pricingDate;
	}

	@Column(name = "EXCHANGE_RATE", precision = 15, scale = 7)
	public BigDecimal getExchangeRate() {
		return this.exchangeRate;
	}

	public void setExchangeRate(BigDecimal exchangeRate) {
		this.exchangeRate = exchangeRate;
	}

	@Column(name = "FUND_CURRENCY", length = 5)
	public String getFundCurrency() {
		return this.fundCurrency;
	}

	public void setFundCurrency(String fundCurrency) {
		this.fundCurrency = fundCurrency;
	}

	@Column(name = "POLICY_CURRENCY", length = 5)
	public String getPolicyCurrency() {
		return this.policyCurrency;
	}

	public void setPolicyCurrency(String policyCurrency) {
		this.policyCurrency = policyCurrency;
	}

	@Column(name = "VALUE_POL_CCY", precision = 15)
	public BigDecimal getValuePolCcy() {
		return this.valuePolCcy;
	}

	public void setValuePolCcy(BigDecimal valuePolCcy) {
		this.valuePolCcy = valuePolCcy;
	}

	@Column(name = "VALUE_FUND_CCY", precision = 15)
	public BigDecimal getValueFundCcy() {
		return this.valueFundCcy;
	}

	public void setValueFundCcy(BigDecimal valueFundCcy) {
		this.valueFundCcy = valueFundCcy;
	}

	@Column(name = "FUND", nullable = false, length = 8)
	public String getFund() {
		return this.fund;
	}

	public void setFund(String fund) {
		this.fund = fund;
	}

	@Column(name = "EVENT_TYPE", nullable = false)
	public int getEventType() {
		return this.eventType;
	}

	public void setEventType(int eventType) {
		this.eventType = eventType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE_FWD_PRICE_REP", length = 23)
	public Date getDateFwdPriceRep() {
		return this.dateFwdPriceRep;
	}

	public void setDateFwdPriceRep(Date dateFwdPriceRep) {
		this.dateFwdPriceRep = dateFwdPriceRep;
	}

	@Column(name = "TRANSACTION0", precision = 14, scale = 0)
	public Long getTransaction0() {
		return this.transaction0;
	}

	public void setTransaction0(Long transaction0) {
		this.transaction0 = transaction0;
	}

	@Column(name = "LINE_NO", nullable = false)
	public int getLineNo() {
		return this.lineNo;
	}

	public void setLineNo(int lineNo) {
		this.lineNo = lineNo;
	}

	@Column(name = "HOLDING_VALUATION", precision = 15)
	public BigDecimal getHoldingValuation() {
		return this.holdingValuation;
	}

	public void setHoldingValuation(BigDecimal holdingValuation) {
		this.holdingValuation = holdingValuation;
	}

	@Column(name = "STATUS")
	public Integer getStatus() {
		return this.status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

	@Column(name = "CREATED_BY", length = 5)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", length = 23)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_TIME", length = 23)
	public Date getCreatedTime() {
		return this.createdTime;
	}

	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	@Column(name = "CREATED_PROCESS", length = 12)
	public String getCreatedProcess() {
		return this.createdProcess;
	}

	public void setCreatedProcess(String createdProcess) {
		this.createdProcess = createdProcess;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_SYSTEM_DATE", length = 23)
	public Date getCreatedSystemDate() {
		return this.createdSystemDate;
	}

	public void setCreatedSystemDate(Date createdSystemDate) {
		this.createdSystemDate = createdSystemDate;
	}

	@Column(name = "MODIFY_BY", length = 5)
	public String getModifyBy() {
		return this.modifyBy;
	}

	public void setModifyBy(String modifyBy) {
		this.modifyBy = modifyBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFY_DATE", length = 23)
	public Date getModifyDate() {
		return this.modifyDate;
	}

	public void setModifyDate(Date modifyDate) {
		this.modifyDate = modifyDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFY_TIME", length = 23)
	public Date getModifyTime() {
		return this.modifyTime;
	}

	public void setModifyTime(Date modifyTime) {
		this.modifyTime = modifyTime;
	}

	@Column(name = "MODIFY_PROCESS", length = 12)
	public String getModifyProcess() {
		return this.modifyProcess;
	}

	public void setModifyProcess(String modifyProcess) {
		this.modifyProcess = modifyProcess;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFY_SYSTEM_DATE", length = 23)
	public Date getModifySystemDate() {
		return this.modifySystemDate;
	}

	public void setModifySystemDate(Date modifySystemDate) {
		this.modifySystemDate = modifySystemDate;
	}

	@Column(name = "JOB_NUMBER")
	public Integer getJobNumber() {
		return this.jobNumber;
	}

	public void setJobNumber(Integer jobNumber) {
		this.jobNumber = jobNumber;
	}

	@Column(name = "FK_FUND_TRANSACFTR_ID", precision = 15, scale = 0)
	public Long getFkFundTransacftrId() {
		return this.fkFundTransacftrId;
	}

	public void setFkFundTransacftrId(Long fkFundTransacftrId) {
		this.fkFundTransacftrId = fkFundTransacftrId;
	}

	@Column(name = "RECIPROCAL")
	public Integer getReciprocal() {
		return this.reciprocal;
	}

	public void setReciprocal(Integer reciprocal) {
		this.reciprocal = reciprocal;
	}

	@Column(name = "BASIS")
	public Integer getBasis() {
		return this.basis;
	}

	public void setBasis(Integer basis) {
		this.basis = basis;
	}

	@Column(name = "ACT_FUND_UNITS", precision = 15, scale = 6)
	public BigDecimal getActFundUnits() {
		return this.actFundUnits;
	}

	public void setActFundUnits(BigDecimal actFundUnits) {
		this.actFundUnits = actFundUnits;
	}

	@Column(name = "ACT_FUND_VALUE_FUND_CCY", precision = 15)
	public BigDecimal getActFundValueFundCcy() {
		return this.actFundValueFundCcy;
	}

	public void setActFundValueFundCcy(BigDecimal actFundValueFundCcy) {
		this.actFundValueFundCcy = actFundValueFundCcy;
	}

	@Column(name = "ACT_FUND_VALUE_POLICY_CCY", precision = 15)
	public BigDecimal getActFundValuePolicyCcy() {
		return this.actFundValuePolicyCcy;
	}

	public void setActFundValuePolicyCcy(BigDecimal actFundValuePolicyCcy) {
		this.actFundValuePolicyCcy = actFundValuePolicyCcy;
	}

	@Column(name = "ACT_FUND_FACTOR", precision = 12, scale = 8)
	public BigDecimal getActFundFactor() {
		return this.actFundFactor;
	}

	public void setActFundFactor(BigDecimal actFundFactor) {
		this.actFundFactor = actFundFactor;
	}

	@Column(name = "MARGIN_VALUE", precision = 15)
	public BigDecimal getMarginValue() {
		return this.marginValue;
	}

	public void setMarginValue(BigDecimal marginValue) {
		this.marginValue = marginValue;
	}

	@Column(name = "MARGIN_VALUE_PREM", precision = 15)
	public BigDecimal getMarginValuePrem() {
		return this.marginValuePrem;
	}

	public void setMarginValuePrem(BigDecimal marginValuePrem) {
		this.marginValuePrem = marginValuePrem;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fundTransaction")
	public Set<AccountTransactionEntity> getAccountTransactions() {
		return this.accountTransactions;
	}

	public void setAccountTransactions(Set<AccountTransactionEntity> accountTransactions) {
		this.accountTransactions = accountTransactions;
	}

	/**
	 * @return the estimatedFlag
	 */
	@Column(name = "ESTIMATED_TRANS_SENT")
	public Integer getEstimatedFlag() {
		return estimatedFlag;
	}

	/**
	 * @param estimatedFlag the estimatedFlag to set
	 */
	public void setEstimatedFlag(Integer estimatedFlag) {
		this.estimatedFlag = estimatedFlag;
	}

	/**
	 * @return the valorizedFlag
	 */
	@Column(name = "VALUED_TRANS_SENT", nullable = true)
	public Integer getValorizedFlag() {
		return valorizedFlag;
	}

	/**
	 * @param valorizedFlag the valorizedFlag to set
	 */
	public void setValorizedFlag(Integer valorizedFlag) {
		this.valorizedFlag = valorizedFlag;
	}

}
